name: Deploy to S3 and CloudFront

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        npm install
        npm install sharp --force

    - name: Run linting
      run: npm run lint

    - name: Build application
      run: npm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Configure S3 bucket for SPA
      run: |
        aws s3api put-bucket-website --bucket ${{ secrets.S3_BUCKET_NAME }} --website-configuration '{
          "IndexDocument": {"Suffix": "index.html"},
          "ErrorDocument": {"Key": "index.html"}
        }'

    - name: Deploy to S3
      run: |
        aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete --cache-control max-age=31536000,public
        aws s3 cp dist/index.html s3://${{ secrets.S3_BUCKET_NAME }}/index.html --cache-control max-age=0,no-cache,no-store,must-revalidate

    - name: Configure CloudFront for SPA
      run: |
        aws cloudfront get-distribution-config --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --query 'DistributionConfig' > dist-config.json
        
        # Update the distribution config to add custom error pages
        cat dist-config.json | jq '.CustomErrorResponses.Items = [
          {
            "ErrorCode": 403,
            "ResponsePagePath": "/index.html",
            "ResponseCode": "200"
          },
          {
            "ErrorCode": 404,
            "ResponsePagePath": "/index.html", 
            "ResponseCode": "200"
          }
        ] | .CustomErrorResponses.Quantity = 2' > updated-dist-config.json
        
        # Get the current ETag
        ETAG=$(aws cloudfront get-distribution-config --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --query 'ETag' --output text)
        
        # Update the distribution
        aws cloudfront update-distribution --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --distribution-config file://updated-dist-config.json --if-match $ETAG

    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"